<?php

namespace Larashed\Agent\Tests\Unit\Storage;

use Illuminate\Filesystem\FilesystemManager;
use Larashed\Agent\Storage\FileStorage;
use Orchestra\Testbench\TestCase;

class FileStorageTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->directory = __DIR__ . '/test-data';

        app('config')->set('filesystems.disks.local.root', $this->directory . '/');
    }

    public function tearDown(): void
    {
        foreach ($this->getFileList() as $file) {
            unlink($file);
        }

        rmdir($this->directory);

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testPushCreatesFiles()
    {
        $storage = $this->getFileStorageInstance();
        $storage->push(['test data']);
        $storage->push(['test data2']);

        $files = $this->getFileList();

        $this->assertCount(2, $files);
    }

    public function testRecordsReturnsCorrectContents()
    {
        $storage = $this->getFileStorageInstance();
        $storage->push(['test data']);
        $storage->push(['test data2']);

        $data = $storage->records()->values()->toArray();

        $this->assertCount(2, $data);
        $expected = [
            '["test data"]',
            '["test data2"]',
        ];
        $this->assertEquals($expected, $data);
    }

    public function testRecordsReturnsLimitedNumberOfFiles()
    {
        $limit = 1;

        $storage = $this->getFileStorageInstance();
        $storage->push(['test data']);
        $storage->push(['test data2']);

        $data = $storage->records($limit)->values()->toArray();

        $this->assertCount($limit, $data);

        $expected = [
            '["test data"]',
        ];

        $this->assertEquals($expected, $data);
    }

    public function testRemoveDeletesFiles()
    {
        $storage = $this->getFileStorageInstance();
        $storage->push(['test data']);
        $storage->push(['test data2']);

        $this->assertCount(2, $this->getFileList());

        $storage->remove($storage->records()->keys()->toArray());

        $this->assertCount(0, $this->getFileList());
    }

    protected function getFileList()
    {
        return glob($this->directory . '/*.json');
    }

    protected function getFileStorageInstance()
    {
        $storage = new FileStorage(app(FilesystemManager::class), 'local', '.');

        return $storage;
    }
}
