<?php

namespace Larashed\Agent\Tests\Unit\Trackers\Database;

use Larashed\Agent\Tests\Traits\ConnectionMock;
use Larashed\Agent\Trackers\Database\QueryExcluder;
use Larashed\Agent\Trackers\Database\QueryExcluderConfig;
use Orchestra\Testbench\TestCase;
use Illuminate\Database\Events\QueryExecuted;

class QueryExcluderTest extends TestCase
{
    use ConnectionMock;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->connection = $this->getConnectionMock();
    }

    /**
     * @param $sql
     * @param $expected
     *
     * @dataProvider queryProvider
     */
    public function testQueriesAreExcluded($sql, $expected)
    {
        // @TODO change to mocked event
        $query = new QueryExecuted($sql, [], 1, $this->connection);

        $excluder = new QueryExcluder(new QueryExcluderConfig('database', 'jobs', 'failed_jobs'));

        $this->assertEquals($expected, $excluder->shouldExclude($query));
    }

    public function testQueriesAreExcludedForNonDatabaseQueueDrivers()
    {
        $query = new QueryExecuted('', [], 1, $this->connection);

        $excluder = new QueryExcluder(new QueryExcluderConfig('redis', 'jobs', 'failed_jobs'));

        $this->assertEquals(false, $excluder->shouldExclude($query));
    }

    public function queryProvider()
    {
        return [
            ['SELECT * FROM `jobs` WHERE', true],
            ['UPDATE `jobs` WHERE', true],
            ['INSERT INTO `jobs`', true],
            ['INSERT INTO `failed_jobs`', true],
            ['SELECT * FROM `random_table` WHERE', false],
            ['SELECT * FROM `custom_jobs_table` WHERE', false],
        ];
    }
}
